hello

var trackingArea: NSTrackingArea?
var tileWidth: CGFloat = 1
var tileHeight: CGFloat = 1
var currentTile: Int = 0
var lineStarted: Bool = false

var downIndex: CGPoint? = nil
var draggedIndex: Int? = nil
var upIndex: Int? = nil
var color = NSColor.darkGrayColor()
var downOnExistingRoadPoint = false
var downOnExistingRailPoint = false

var dragDidStart = false // starting a drag cancels a delete on click
var isEditing = false // isEditing determines whether a new line is created or the existing one is being edited
var isEditingRail = false
var drag = false
var dragRail1 = false // equivalent to drag
var select = -1
var selectRail = -1
var paths: [[Int]] = []
var allPaths: [Path] = []
var pathsRail: [[Int]] = []

var pathA: [NSBezierPath] = []
var pathARail: [NSBezierPath] = []
var dragPath = false
var dragRail = false // equivalent to dragPath
var typeButton = Type.road


override var flipped: Bool {
get {return true}
}

@IBAction func typeDidChange(sender: NSPopUpButton) {
let type = sender.titleOfSelectedItem!

switch type {
case "road":
typeButton = Type.road
case "rail":
typeButton = Type.rail
default:
typeButton = Type.road
}

Swift.print(typeButton)
}



func setup() {
// device size is the size of the window - 4 col and 4 row each side
let deviceSize = NSSize(width: ((self.bounds.size.width/72)*64),height:((self.bounds.size.height/48)*40))

//let rect = self.bounds
self.tileWidth = deviceSize.width / CGFloat(64)
self.tileHeight = deviceSize.height / CGFloat(40)

self.window?.makeFirstResponder(self)

if self.trackingArea != nil {
self.removeTrackingArea(self.trackingArea!)
}

trackingArea = NSTrackingArea(rect: self.bounds, options: [NSTrackingAreaOptions.ActiveInKeyWindow, NSTrackingAreaOptions.MouseMoved], owner: self, userInfo: nil)
self.addTrackingArea(trackingArea!)
}
//
func indexFromPoint(point: NSPoint) -> Int {
return Int(floor(point.x / tileWidth) + CGFloat(72) * floor(point.y / tileHeight))
}

func pointFromIndex(index: Int) -> NSPoint {
let x: CGFloat = CGFloat(index % 72) * self.tileWidth
let y: CGFloat = floor(CGFloat(index) / CGFloat(72)) * self.tileHeight
return NSPoint(x: x, y: y)
}

func centerPointFromIndex(index: Int) -> NSPoint {
let point = pointFromIndex(index)
return NSPoint.init(x: point.x + self.tileWidth, y: point.y + self.tileHeight)
}

override func mouseMoved(theEvent: NSEvent) {
let pointInView = self.convertPoint(theEvent.locationInWindow, fromView: nil)
currentTile = indexFromPoint(pointInView)
self.setNeedsDisplayInRect(self.bounds)
}

override func mouseDown(theEvent: NSEvent) {
let pointInView = self.convertPoint(theEvent.locationInWindow, fromView: nil)
self.downIndex = pointInView

self.dragDidStart = false

// Check to see if mouse is down on an existing point
self.downOnExistingRoadPoint = false
for var i = 0; i < self.paths.count; i++ {
for var j = 0; j < self.paths[i].count; j++ {
if self.paths[i][j] == self.downIndex! {
self.downOnExistingRoadPoint = true


break
}
}
}

self.downOnExistingRailPoint = false
for var i = 0; i < self.pathsRail.count; i++ {
for var j = 0; j < self.pathsRail[i].count; j++ {
if self.pathsRail[i][j] == self.downIndex! {
self.downOnExistingRailPoint = true


break
}
}
}

dragPath = false

if !downOnExistingRoadPoint && !downOnExistingRailPoint{
for var i = 0; i < self.pathA.count; i++ {
if CGPathContainsPoint(pathA[i].convertToCGPath(), nil , pointInView, false) {

NSColor.blueColor().set()
if select != i{
select = i
dragPath = true
Swift.print("pathA")
Swift.print(select)
self.setNeedsDisplayInRect(self.bounds)
}else{
Swift.print("pathA")
Swift.print(select)
dragPath = false
select = -1
self.setNeedsDisplayInRect(self.bounds)
}
break
}
}
}

dragRail = false

if !downOnExistingRailPoint && !downOnExistingRoadPoint{

for var i = 0; i < self.pathARail.count; i++ {
if CGPathContainsPoint(pathARail[i].convertToCGPath(), nil , pointInView, false) {

NSColor.blueColor().set()
if selectRail != i{
selectRail = i
dragRail = true

Swift.print(selectRail)
self.setNeedsDisplayInRect(self.bounds)
}else{
dragPath = false
selectRail = -1
self.setNeedsDisplayInRect(self.bounds)
}

break
}
}
}

if (!self.downOnExistingRailPoint && !dragPath && !dragRail) {

if typeButton == Type.road{

if self.isEditing {

let last = self.paths.count - 1
self.paths[last].append(self.downIndex!)
if self.paths[last].count == 4 {
// Exit out of editing mode
self.isEditing = false
}

} else {
// Create a new path at the end of the paths array
self.allPaths.append(Path(type: typeButton))
//self.paths.append([])
let lastOfAllpaths = self.allPaths.count - 1
let lastOfPaths = allPaths[lastOfAllpaths].path.count - 1
let lastPath = allPaths[lastOfAllpaths]
lastPath.path[lastOfPaths].append(self.downIndex!)
self.isEditing = true
}

}else{
if self.isEditingRail {
let last = self.pathsRail.count - 1
self.pathsRail[last].append(self.downIndex!)
if self.pathsRail[last].count == 4 {
// Exit out of editing mode
self.isEditingRail = false
}
} else {
// Create a new path at the end of the paths array
self.pathsRail.append([])
let last = self.pathsRail.count - 1
self.pathsRail[last].append(self.downIndex!)
self.isEditingRail = true
}
}
}

self.setNeedsDisplayInRect(self.bounds)
}

override func mouseDragged(theEvent: NSEvent) {
let pointInView = self.convertPoint(theEvent.locationInWindow, fromView: nil)
self.draggedIndex = indexFromPoint(pointInView)

// Find the index in the current path array of the downIndex
if select < 0{
if typeButton == 0{
for var i = 0; i < self.paths.count; i++ {
for var j = 0; j < self.paths[i].count; j++ {
if self.paths[i][j] == self.downIndex! {
self.paths[i][j] = self.draggedIndex!
self.downIndex = self.draggedIndex
drag = true
break
}
}
}

}else{
for var i = 0; i < self.pathsRail.count; i++ {
for var j = 0; j < self.pathsRail[i].count; j++ {
if self.pathsRail[i][j] == self.downIndex! {
self.pathsRail[i][j] = self.draggedIndex!
self.downIndex = self.draggedIndex
dragRail1 = true
break
}
}
}
}
}

if typeButton == 0 && select >= 0 && !drag{

for var i = 0; i < paths[select].count; i++ {
let newPath = NSPointFromCGPoint(CGPointMake(centerPointFromIndex(paths[select][i]).x + theEvent.deltaX, centerPointFromIndex(paths[select][i]).y + theEvent.deltaY))
paths[select][i] = indexFromPoint(newPath)
self.setNeedsDisplayInRect(self.bounds)
}

}else if typeButton == 1 && selectRail >= 0 && !dragRail1{
for var i = 0; i < pathsRail[selectRail].count; i++ {
let newPath = NSPointFromCGPoint(CGPointMake(centerPointFromIndex(pathsRail[selectRail][i]).x + theEvent.deltaX, centerPointFromIndex(pathsRail[selectRail][i]).y + theEvent.deltaY))
pathsRail[selectRail][i] = indexFromPoint(newPath)
self.setNeedsDisplayInRect(self.bounds)
}
}

self.dragDidStart = true

self.setNeedsDisplayInRect(self.bounds)
}

override func mouseUp(theEvent: NSEvent) {
let pointInView = self.convertPoint(theEvent.locationInWindow, fromView: nil)
self.upIndex = indexFromPoint(pointInView)

if dragDidStart{
select = -1
selectRail = -1
}

if drag{
drag = false
}

if dragRail1{
dragRail1 = false
}

if typeButton == 0{
if self.downOnExistingRoadPoint && self.downIndex == self.upIndex && !self.dragDidStart {
for var i = 0; i < self.paths.count; i++ {
for var j = 0; j < self.paths[i].count; j++ {
if self.paths[i][j] == self.upIndex! {
self.paths[i].removeAtIndex(j)
break
}
}
}
}


}else if (self.downOnExistingRailPoint && self.downIndex == self.upIndex && !self.dragDidStart){
for var i = 0; i < self.pathsRail.count; i++ {
for var j = 0; j < self.pathsRail[i].count; j++ {
if self.pathsRail[i][j] == self.upIndex! {
self.pathsRail[i].removeAtIndex(j)
break
}
}
}
}

self.setNeedsDisplayInRect(self.bounds)
}

override func keyDown(theEvent: NSEvent) {

if theEvent.keyCode == 36 || theEvent.keyCode == 76 {
self.setNeedsDisplayInRect(self.bounds)
self.isEditing = false
self.setNeedsDisplayInRect(self.bounds)
} else {
super.keyDown(theEvent)
}
}

override func drawRect(dirtyRect: NSRect) {
let rect = self.bounds
// device size is the size of the window - 4 col and 4 row each side
let deviceSize = NSSize(width: ((self.bounds.size.width/72)*64),height:((self.bounds.size.height/24)*20))
NSColor.whiteColor().set()
NSRectFill(rect)

let tileWidth = deviceSize.width / CGFloat(COL_COUNT)
let tileHeight = deviceSize.height / CGFloat(ROW_COUNT)

// Draw grid
NSColor.lightGrayColor().set()
for var col = 0; col < COL_COUNT + 8; col++ {
NSRectFill(NSRect(x: CGFloat(col) * tileWidth, y: 0, width: 1, height: rect.height))
}
for var row = 0; row < ROW_COUNT + 8; row++ {
NSRectFill(NSRect(x: 0, y: CGFloat(row) * tileHeight, width: rect.width, height: 1))
}
// Draw device limits
NSColor.blackColor().set()
NSRectFill(NSRect(x: CGFloat(4) * tileWidth, y: tileHeight * 4, width: 2, height: deviceSize.height))
NSRectFill(NSRect(x: CGFloat(68) * tileWidth, y: tileHeight * 4, width: 2, height: deviceSize.height))
NSRectFill(NSRect(x: tileWidth * 4, y: CGFloat(4) * tileHeight, width: deviceSize.width, height: 2))
NSRectFill(NSRect(x: tileWidth * 4, y: CGFloat(24) * tileHeight, width: deviceSize.width, height: 1))
NSRectFill(NSRect(x: tileWidth * 4, y: CGFloat(44) * tileHeight, width: deviceSize.width, height: 2))
NSRectFill(NSRect(x: CGFloat(36) * tileWidth, y: tileHeight * 4, width: 1, height: deviceSize.height))


// Draw current tile
let point = pointFromIndex(currentTile)
NSColor.redColor().set()
NSRectFill(NSRect(x: point.x, y: point.y, width: tileWidth * 2, height: tileHeight * 2))

// Draw paths
let pattern : [CGFloat] = [5.0,5.0]
for var i = 0; i < self.paths.count; i++ {
let pathPoints = self.paths[i]

if i == select{
NSColor.darkGrayColor().set()

pathA[select].setLineDash(pattern, count: 2, phase: 0)
pathA[select].stroke()

}else{
NSColor.darkGrayColor().set()
let path = NSBezierPath.init()
path.lineWidth = self.tileWidth * 4
if pathPoints.count == 2 {
// Draw a straight line
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
path.moveToPoint(p1)
path.lineToPoint(p2)
path.stroke()
if pathA.count < i + 1 {
pathA.append(path)
}else{
pathA[i] = path
}


} else if pathPoints.count == 3 {
// Draw a quadratic curve
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
let p3 = self.centerPointFromIndex(pathPoints[2])
path.moveToPoint(p1)
path.curveToPoint(p3, controlPoint1: p2, controlPoint2: p2)
path.stroke()
pathA[i] = path


} else if pathPoints.count == 4 {
// Draw a quadratic curve
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
let p3 = self.centerPointFromIndex(pathPoints[2])
let p4 = self.centerPointFromIndex(pathPoints[3])
path.moveToPoint(p1)
path.curveToPoint(p4, controlPoint1: p2, controlPoint2: p3)
path.stroke()
pathA[i] = path
}

}
NSColor.redColor().set()
for var j = 0; j < pathPoints.count; j++ {
let index = pathPoints[j]
if self.isEditing && i == self.paths.count - 1 && j == pathPoints.count - 1 {
NSColor.greenColor().set()
}
let point = pointFromIndex(index)
NSRectFill(NSRect(x: point.x, y: point.y, width: tileWidth * 2, height: tileHeight * 2))


}

}
for var i = 0; i < self.pathsRail.count; i++ {
Swift.print(pathsRail)
let pathPoints = self.pathsRail[i]
if i == selectRail{
NSColor.blueColor().set()
let pattern : [CGFloat] = [5.0,5.0]
pathARail[selectRail].setLineDash(pattern, count: 2, phase: 0)
pathARail[selectRail].stroke()

}else{
NSColor.brownColor().set()
let path = NSBezierPath.init()
path.lineWidth = 23
if pathPoints.count == 2 {
// Draw a straight line
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
path.moveToPoint(p1)
path.lineToPoint(p2)
path.setLineDash(pattern, count: 2, phase: 0)
path.stroke()

// path.stroke()
if pathARail.count < i + 1 {
pathARail.append(path)
}else{
pathARail[i] = path
}
NSColor.blackColor().set()

var path2 = pathARail[i].convertToCGPath()
var outPath = CGPathCreateCopyByStrokingPath(path2, nil, 15, CGLineCap.Round , CGLineJoin.Round, 0)
var context = NSGraphicsContext.currentContext()?.CGContext
CGContextSetLineWidth(context, 2)
CGContextAddPath(context, outPath)
CGContextDrawPath(context, CGPathDrawingMode.Stroke)


} else if pathPoints.count == 3 {
// Draw a quadratic curve
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
let p3 = self.centerPointFromIndex(pathPoints[2])
path.moveToPoint(p1)
path.curveToPoint(p3, controlPoint1: p2, controlPoint2: p2)
path.setLineDash(pattern, count: 2, phase: 0)
NSColor.brownColor().set()
path.stroke()
// path.stroke()
pathARail[i] = path
NSColor.blackColor().set()

var path2 = pathARail[i].convertToCGPath()
var outPath = CGPathCreateCopyByStrokingPath(path2, nil, 10, CGLineCap.Round , CGLineJoin.Round, 0)
var context = NSGraphicsContext.currentContext()?.CGContext
CGContextSetLineWidth(context, 2)
CGContextAddPath(context, outPath)
CGContextDrawPath(context, CGPathDrawingMode.Stroke)


} else if pathPoints.count == 4 {
// Draw a quadratic curve
let p1 = self.centerPointFromIndex(pathPoints[0])
let p2 = self.centerPointFromIndex(pathPoints[1])
let p3 = self.centerPointFromIndex(pathPoints[2])
let p4 = self.centerPointFromIndex(pathPoints[3])
path.moveToPoint(p1)
path.curveToPoint(p4, controlPoint1: p2, controlPoint2: p3)
path.setLineDash(pattern, count: 2, phase: 0)
NSColor.brownColor().set()
path.stroke()
// path.stroke()
pathARail[i] = path
NSColor.blackColor().set()

var path2 = pathARail[i].convertToCGPath()
var outPath = CGPathCreateCopyByStrokingPath(path2, nil, 10, CGLineCap.Round , CGLineJoin.Round, 0)
var context = NSGraphicsContext.currentContext()?.CGContext
CGContextSetLineWidth(context, 2)
CGContextAddPath(context, outPath)
CGContextDrawPath(context, CGPathDrawingMode.Stroke)

}

}



NSColor.redColor().set()
for var j = 0; j < pathPoints.count; j++ {
let index = pathPoints[j]
if self.isEditing && i == self.pathsRail.count - 1 && j == pathPoints.count - 1 {
NSColor.greenColor().set()
}
let point = pointFromIndex(index)
NSRectFill(NSRect(x: point.x, y: point.y, width: tileWidth * 2, height: tileHeight * 2))


}

}

}
